<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">

  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

  <link href='https://fonts.googleapis.com/css?family=Montserrat' rel='stylesheet'>
  <link href='https://fonts.googleapis.com/css?family=Montserrat:italic' rel='stylesheet'>
  <link href='https://fonts.googleapis.com/css?family=Montserrat:bold' rel='stylesheet'>
  <link href='https://fonts.googleapis.com/css?family=Montserrat:bolditalic' rel='stylesheet'>

  <link href="https://fonts.googleapis.com/css?family=Roboto" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css?family=Roboto:italic" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css?family=Roboto:bold" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css?family=Roboto:bolditalic" rel="stylesheet">


  <link rel="stylesheet" href="summermvc.css">

  <script>
    $(document).ready( function(){
      $(".after").css( "height", $(".base").outerHeight() + $(".navbar").outerHeight() );

      if( $(window).scrollTop() > $("blockquote").outerHeight() + parseInt( $(".doc-nav").css( "padding-top" ).replace( "px", "" ) ) ){
        $(".doc-nav-list").css({top: parseInt( $(".doc-nav").css( "padding-top" ).replace( "px", "" ) ) - parseInt( $(".doc-description").css("padding-top").replace( "px", "" ) ), position:'fixed', width: $(".doc-description").css("width")});
        $(".doc-nav-list").addClass( "affix" );
      } else{
        $(".doc-nav-list").css({top:0, position:'relative'});
        $(".doc-nav-list").removeClass( "affix" );
      }

      var video_width = $(".manual_video").css( "width" );
      var video_height = parseInt(video_width) * 0.5625;
      $(".manual_video").css( "height", video_height );

      $(window).scroll( function( event ){

        // 1. Right Half Page css
        $(".after").css( "height", $(".base").outerHeight() + $(".navbar").outerHeight() );

        // 2. doc-nav-list affix
        if( $(window).scrollTop() > $("blockquote").outerHeight() + parseInt( $(".doc-nav").css( "padding-top" ).replace( "px", "" ) ) ){
          $(".doc-nav-list").css({top: parseInt( $(".doc-nav").css( "padding-top" ).replace( "px", "" ) ) - parseInt( $(".doc-description").css("padding-top").replace( "px", "" ) ), position:'fixed', width: $(".doc-description").css("width")});
          $(".doc-nav-list").addClass( "affix" );
        } else{
          $(".doc-nav-list").css({top:0, position:'relative'});
          $(".doc-nav-list").removeClass( "affix" );
        }

        // 3. content-enables -> doc-nav-list active
        var offset = 80;
        var activeElement = "";
        var specifics = $(".doc-h3, .doc-h4");

        if( specifics == null ){
          specifics = document.getElementsByClassName( "" );
        }

        for( var i=0; i<specifics.length; i++ ){
          var startOffset = 0;
          var endOffset = 0;

          startOffset = $( "#" + specifics[i].id ).offset().top - offset;
          if( startOffset > $(window).scrollTop() ){
            activeElement = "";
            break;
          }

          if( i != specifics.length - 1 ){
            endOffset = $( "#" + specifics[i+1].id ).offset().top - offset;
          } else{
            // endOffset = $( "#" + specifics[i].id ).offset().top + $( ".content_specific" ).outerHeight() - offset;
            endOffset = $( "#" + specifics[i].id ).offset().top + $( "#" + specifics[i].id ).parent().outerHeight( true ) - offset;
          }

          if( $(window).scrollTop() > startOffset && $(window).scrollTop() < endOffset ){
            activeElement = specifics[i].id;
            break;
          }

          if( $(window).scrollTop() + $(window).height() == $(document).height() ){
            activeElement = specifics[specifics.length - 1].id;
            break;
          }

          if( i == specifics.length ){
            activeElement = "";
          }
        }

        if( activeElement != "" ){
          $("*").removeClass( "scrolled" );
          $( "#dnl_" + activeElement ).addClass( "scrolled" );
          $( "#dnl_" + activeElement ).parent().addClass( "scrolled" );

          if( ( $( "#" + activeElement ).attr( "class" ) ).indexOf( "doc-h4" ) >= 0 ){
            $( "#dnl_" + activeElement ).parent().parent().parent().addClass( "scrolled" );
            $( "#dnl_" + activeElement ).parent().parent().siblings("a").addClass( "scrolled" );
          }
        } else{
          $("*").removeClass( "scrolled" );
          $(".doc-nav-list *, .doc-nav-sub-list *").removeClass( "active" );
        }
      } );

      // when doc-nav-list clicked -> active
      $(".doc-nav-list > li > a").on( "click", function(){
        $("*").removeClass("active");
        $(this).parent().addClass( "active" );
      } );

      $(".doc-nav-sub-list > li > a").on( "click", function(){
        $("*").removeClass("active");
        $(this).parent().addClass( "active" );
        $(this).parent().parent().parent().addClass( "active" );
      } );

      // Youtube Video responsive
      video_width = $(".manual_video").css( "width" );
      video_height = parseInt(video_width) * 0.5625;
      $(".manual_video").css( "height", video_height );
    } );
  </script>
</head>

<body class="base">
  <header class="navbar navbar-inverse navbar-fixed-top">
    <div class="navbar-container">
      <div class="navbar-header">
        <button type="button" style="margin-left: 10px" class="pull-left navbar-toggle" data-toggle="collapse" data-target="#top_menu">
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
        </button>
        <!-- <a id="<%- topLeftMenus[0].id %>" name="<%- topLeftMenus[0].name %>" class="navbar-brand" href="<%- topLeftMenus[0].redirectpath %>"><img src="summer-mvc-logo.ico" style="display:inline-block; max-width: 35px" /></a> -->
        <a href="/" class="navbar-brand mobile-navbar-brand mobile-show">summer-mvc</a>
        <!-- <img id="download" src="/download_icon.gif" class="mobile-show"/> -->
        <a id="download" class="mobile-show" href="/"><i class="fa fa-facebook fa-lg logo"></i></a>
      </div>
    </div>
    <div class="collapse navbar-collapse navbar-content" id="top_menu">
      <ul class="nav navbar-nav top-nav">
        <% for( var i=0; i<topLeftMenus.length; i++ ){ %>
          <li id="<%- topLeftMenus[i].id %>" name="<%- topLeftMenus[i].name %>" class="<%- topLeftMenus[i].active %>"><a href="<%- topLeftMenus[i].redirectpath %>" ><%- topLeftMenus[i].displayname %></a></li>
        <% } %>
      </ul>
      <ul class="nav navbar-nav navbar-right top-nav">
        <% for( var i=0; i<topRightMenus.length-1; i++ ){ %>
          <% if( topRightMenus[i].type === "href" ){ %>
            <li id="<%- topRightMenus[i].id %>" name="<%- topRightMenus[i].name %>" class="<%- topRightMenus[i].active %>"><a href="<%- topRightMenus[i].redirectpath %>" ><i class="<%- topRightMenus[i].icon %>"></i>&nbsp;&nbsp;<%- topRightMenus[i].displayname %></a></li>
          <% } else if( topRightMenus[i].type === "onclick" ){ %>
            <li id="<%- topRightMenus[i].id %>" name="<%- topRightMenus[i].name %>" class="<%- topRightMenus[i].active %>"><a href="#" onclick="<%- topRightMenus[i].redirectpath %>" ><i class="<%- topRightMenus[i].icon %>"></i>&nbsp;&nbsp;<%- topRightMenus[i].displayname %></a></li>
          <% } %>
        <% } %>
        <li style="padding-right: 15px" id="<%- topRightMenus[topRightMenus.length-1].id %>" name="<%- topRightMenus[topRightMenus.length-1].name %>" class="<%- topRightMenus[topRightMenus.length-1].active %>"><a href="<%- topRightMenus[topRightMenus.length-1].redirectpath %>" ><i class="<%- topRightMenus[topRightMenus.length-1].icon %>"></i>&nbsp;&nbsp;<%- topRightMenus[topRightMenus.length-1].displayname %></a></li>
      </ul>
    </div>
  </header>

  <div class="container-fluid doc">
    <div class="row">
      <div class="col-lg-3 col-md-3 col-sm-3 mobile-hidden doc-nav">
        <blockquote class="doc-description" onclick="location.href=''">
        	<% for( var i=0; i<topLeftMenus.length; i++ ){ %>
	          <% if( topLeftMenus[i].active == "active" ){ %>
	      		<h4><%- topLeftMenus[i].displayname %></h4>
	      		<p><%- topLeftMenus[i].description %></p>
	          <% } %>
	        <% } %>
        </blockquote>
        <ul class="doc-nav-list" >
          <li>
            <a href="#get_summer_mvc" id="dnl_get_summer-mvc">Get summer-mvc</a>
            <ul class="doc-nav-sub-list">
              <li><a href="#npm" id="dnl_npm">NPM</a></li>
              <li><a href="#binary" id="dnl_binary">Binary</a></li>
            </ul>
          </li>
          <li>
            <a href="#setting_up" id="dnl_setting_up">Setting Up</a>
            <ul class="doc-nav-sub-list">
              <li><a href="#include_in_project" id="dnl_include_in_project">Include in project</a></li>
              <li><a href="#build_hiererchy" id="dnl_build_hiererchy">Build Hierarchy</a></li>
            </ul>
          </li>
          <li>
            <a href="#initializing" id="dnl_initializing">Initializing</a>
            <ul class="doc-nav-sub-list">
              <li><a href="#initializer_json" id="dnl_initializer_json">initializer.json</a></li>
              <li><a href="#setting_port" id="dnl_setting_port">Port</a></li>
              <li><a href="#setting_context_architecture" id="dnl_setting_context_architecture">Context Architecture</a></li>
              <li><a href="#setting_views" id="dnl_setting_views">Views</a></li>
              <li><a href="#setting_tools" id="dnl_setting_tools">Tools</a></li>
              <li><a href="#setting_options" id="dnl_setting_options">Options</a></li>
              <li><a href="#setting_static_folders" id="dnl_setting_static_folders">Static Folders</a></li>
            </ul>
          </li>
          <li>
            <a href="#create_application" id="dnl_create_application">Create Application</a>
            <ul class="doc-nav-sub-list">
              <li><a href="#context_dispatcher_json" id="dnl_context_dispatcher_json">context-ispatcher.json</a></li>
              <li><a href="#controller" id="dnl_controller">Controller</a></li>
              <li><a href="#view" id="dnl_view">View</a></li>
              <li><a href="#model" id="dnl_model">Model</a></li>
              <li><a href="#example" id="dnl_example">Example</a></li>
            </ul>
          </li>
        </ul>
      </div>
      <div class="col-lg-9 col-md-9 col-sm-9 doc-content">

      <div class="well doc-well-inverse p-end">
        Installing, Initializing and Development are very easy with summer-mvc. <br>
        summer-mvc can be installed both NPM and binaries. <br>
        And when first executing time, your project will be shaped as typical web application hirerchy. <br>
        It looks like JAVA's spring framework. <br>
        The final job is to write your own business codes such as controllers and views.
      </div>

      <h3 id="get_summer_mvc" class="doc-h3">Get summer-mvc</h3>
      <hr class="doc-divider">

      <h4 id="npm" class="doc-h4">NPM</h4>
      <p>
        First, prepare your Nodejs project. And, type below command.
        When completed to install, please check your <code class="doc-file">package.json</code> file and be sure to contain summer-mvc.
        More information can be found at <a href="https://www.npmjs.com/packages/summer-mvc">here</a>
      </p>
      <div class="well doc-well">
        $ npm install summer-mvc
      </div>
      <p>
        <!-- <img src="install.png" style="width:100%" /> -->
        <iframe class="manual_video" style="width:100%" src="//www.youtube.com/embed/nbqMR-WhsBQ" frameborder="0" allowfullscreen="allowfullscreen"></iframe>
      </p>
      <blockquote class="doc-notice">
        Notice! Be sure that command location is your Nodejs project folder.
      </blockquote>

      <h4 id="binary" class="doc-h4">Binary</h4>
      <p class="section-end">
        If you already have your environment, so you don't want to use NPD, binary installation is alternative way.
        Please download binary zip file and extract it under <code class="doc-file">{user-project}/node_modules</code><br>
        <button class="btn_important" onclick="javascript:download()">DOWNLOAD_BINARY</button>
        <form id="file_download_form" action="/download" method="get"></form>
      </p>

      <script>
        function download(){
          $("#file_download_form").submit();
        }
      </script>


      <h3 id="setting_up" class="doc-h3">Setting Up</h3>
      <hr style="border-top: 1px solid #ccc;">

      <p class="p-end">
        As controlling http req/res is event-driven, node must be run continuously. It means that summer-mvc also be run until it gets process end signal. Ironically, that why summer-mvc's setting is easy. Just require/import summ-mvc module. That's all. summer-mvc core module will create / make some folders and files. And your project will be shaped as typical web application project.
      </p>

      <h4 id="include_in_project" class="doc-h4">Include in Project</h4>
      <p>
        The summer-mvc is package moduler. So "require" is the only way to include summer-mvc to your project.
        As controlling http req/res must be waited until a signal comes, that way to "require the summer-mvc" is unique method to use.
        Create your project's entry js file such as <code class="doc-file">app.js</code>.
        And write code as follow.
      </p>

      <div class="well doc-well p-end">
        const mvc = require( "summer-mvc" );
      </div>

      <h4 id="build_hiererchy" class="doc-h4">Build Hierarchy</h4>
      <p>
        After require including, you can execute your project under <b>summer-mvc</b>.
        When first executing, you meet <code class="doc-emphasis">Automatic Building Machinsm</code>.
        Most of web applications have this machnism.
        If you import Spring Framework in Java Platform, Spring Framework automatically create your project folder hierarchy and create property files.
        The summer-mvc do same thing for you.
        <code class="doc-file">context-dispatcher.json</code>, <code class="doc-file">initializer.json</code>, some <code class="doc-file">tools-properties</code>, etc will be located specific folders.
        You can control this process in <code class="doc-file">initializer.json</code>.
      </p>
      <!-- <img class="section-end" src="/execution.png" style="width:100%" /> -->
      <iframe class="section-end manual_video" style="width:100%" src="//www.youtube.com/embed/RJFem_aWxIY" frameborder="0" allowfullscreen="allowfullscreen"></iframe>

      <h3 id="initializing" class="doc-h3">Initializing</h3>
      <hr style="border-top: 1px solid #ccc;">

      <iframe class="p-end manual_video" style="width:100%" src="//www.youtube.com/embed/WRuBzKUgipg" frameborder="0" allowfullscreen="allowfullscreen"></iframe>

      <h4 id="initializer_json" class="doc-h4">initializer.json</h4>
      <p class="p-end">
        Whole initializing information can be setted in <code class="doc-file">initializer.json</code>.
        The summer-mvc core will interprete this file and build project's architecture.
        As convenient using of summer-mvc, sample initialzing information have contained in default <kdb>initializer.json</kdb>.
      </p>

      <h4 id="setting_port" class="doc-h4">Port</h4>
      <p>
        As summer-mvc uses <code class="doc-middleware">Express</code> as foundation module, default port number is 3000.
        It can be changed if you want to use other ports. It's type is number.
      </p>
      <div class="well doc-well p-end">
        "port" : 3000
      </div>

      <h4 id="setting_context_architecture" class="doc-h4">Context Architecture</h4>
      <p class="p-end">
        The context-architecture property is array of <code class="doc-emphasis">folder hierarchy objects</code>.
        The folder hierarchy objects contain <code class="doc-emphasis">folder</code> and <code class="doc-emphasis">file objects</code>.
        It is possible to contain your own architecture in initializer.
        If want to do that, please follow rules of JSON.
        These folders automatically create under your project root folder,
        these files will be copied and moved in folders.
      </p>
      <table class="table table-responsive table-hover table-condensed p-end" style="width:100%">
        <thead>
          <tr>
            <th>Folder</th>
            <th>Files</th>
            <th>Infomation</th>
          </tr>
        </thaed>
        <tbody>
          <tr>
            <td>/core-properties</td>
            <td>context_dispatcher.json<br>
              initializer.json</td>
            <td>
              core properties of summer-mvc<br>
              Located under {user-project}/core-properties <br>
              Enable to correct, But don't delete.
            </td>
          </tr>
          <tr>
            <td>/application/controllers</td>
            <td>controller_basic.js<br>
              controller_post.js<br>
              controller_ajax.js<br>
              controller_cookie_session.js<br>
              controller_db.js<br>
              controller_file.js</td>
            <td>
              basic controllers of summer-mvc<br>
              Located under {user-project}/application/controllers<br>
              Reference controllers these can give example.
            </td>
          </tr>
          <tr>
            <td>/application/views</td>
            <td>index.ejs<br>
              upload.ejs<br>
              error.html</td>
            <td>
              basic views of summer-mvc<br>
              Located under {user-project}/application/views<br>
              Reference views these can give example.
            </td>
          </tr>
          <tr>
            <td>/static/upload</td>
            <td>-</td>
            <td>The summer-mvc use this folder as default file upload location.</td>
          </tr>
          <tr>
            <td>/static</td>
            <td>favicon.ico</td>
            <td>Default favicon<br>
              If you want to delete this file, please write below codes in your view (ejs or html) files.
              <code>&#60;link rel="icon" href="data:;base64,iVBORw0KGgo="&#62;</code>
            </td>
          </tr>
          <tr>
            <td>/__Logs</td>
            <td>-</td>
            <td>Default Log location<br>
              It can be changed in <code class="doc-file">/tool-properties/logger.json</code>. But not recommended.
            </td>
          </tr>
        </tbody>
      </table>

      <h4 id="setting_views" class="doc-h4">Views</h4>
      <p>
        The ejs is basic view engine of the summer-mvc.
        Adoptation of other view engines are in progress now.
        Now (v2.0.0), this property is a default value. Please don't change.
      </p>
      <div class="well doc-well">
        "engine" : "ejs"
      </div>
      <blockquote class="doc-notice p-end">
        More information can be founded in <a href="https://www.npmjs.com/package/ejs">ejs manual site</a>.
      </blockquote>

      <h4 id="setting_tools" class="doc-h4">Tools</h4>
      <p>
        Some tools are introduced in v2.0.0 such as logger, errorHandler, connectionHandler, fildHandler and mysqlHandler.
        (exitHandler is a mandatory tools.)
        These tools will run with properties and submodules.
        During initial time, the summer-mvc core create / copy these files to your project.
        That you only to do is that set <code class="doc-emphasis">enable</code> property whether to use these tools or not.
        Tools use 2 specific folders to execute, <code class="doc-file">/tools-properties</code> and <code class="doc-file">tools-submodules</code>.
        <code class="doc-file">/tools-properties</code> contains property files and <code class="doc-file">/tools-submodules</code> contains js files help tool.
      </p>
      <div class="well doc-well p-end">
        "enable" : true | false
      </div>
      <table class="table table-hover p-end">
        <thead>
          <tr>
            <th>Name</th>
            <th>Folder</th>
            <th>Files</th>
            <th>Information</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>logger</td>
            <td>
              /tools-properties<br>
              /__Logs
            </td>
            <td>logger.json</td>
            <td>Default logger folder and file<br>
              Logger give you console and log file usage.
              More information will be found in <a href="">here</a>.
            </td>
          </tr>
          <tr>
            <td>errorHandler</td>
            <td>/tools-submodules</td>
            <td>clientErrorHandler.js</td>
            <td>Default errorHandler folder and file<br>
              All error will be thrown to summer-mvc's default error handler.
              For inserting code into clientErrorHandler.js, you can control error as custom.
              More information will be found in <a href="">here</a>.
            </td>
          </tr>
          <tr>
            <td>connectionHandler</td>
            <td>/tools-properties</td>
            <td>connection.json</td>
            <td>Default connectionHandler folder and file<br>
              cookie & session can be controlled with this tools.
              Property file contains specific settings when you control cookie & session.
              More information will be found in <a href="">here</a>.
            </td>
          </tr>
          <tr>
            <td>connectionHandler</td>
            <td>/tools-submodules</td>
            <td>connectionHandlerSubmodules.js</td>
            <td>Default connectionHandler folder and file<br>
              ConnectionHandler give external information for executing.
              For help connectionHandler, you can customize this submodules.
              More information will be found in <a href="">here</a>.
            </td>
          </tr>
          <tr>
            <td>fileHandler</td>
            <td>/tools-properties</td>
            <td>file.json</td>
            <td>Default fileHandler folder and file<br>
              For uploadig files, some configurations are needed.
              This file contains information for file handling.
              More information will be found in <a href="">here</a>.
            </td>
          </tr>
          <tr>
            <td>fileHandler</td>
            <td>/tools-submodules</td>
            <td>fileSubmodules.js</td>
            <td>Default fileHandler folder and file<br>
              As server and client both have other environment.
              Uploading and downloading files have to be managed adapter.
              More information will be found in <a href="">here</a>.
            </td>
          </tr>
          <tr>
            <td>mysqlHandler</td>
            <td>/tools-properties</td>
            <td>mysql.json</td>
            <td>Default mysqlHandler folder and file<br>
              Now (v2.0.0), mysql is unique DBMS for summer-mvc.
              A DBMS connection information is contains in this file.
              More information will be found in <a href="">here</a>.
            </td>
          </tr>
          <tr>
            <td>mysqlHandler</td>
            <td>/tools-submodules/db/queries</td>
            <td>query.json</td>
            <td>Default mysqlHandler folder and file<br>
              Predefined queries can improve development speed.
              Other query files can be generated when needed.
              But, this file is default so that to correct this file is convenient.
              More information will be found in <a href="">here</a>.
            </td>
          </tr>
          <tr>
            <td>exitHandler</td>
            <td>/tools-submodules</td>
            <td>clientExitHandler.js</td>
            <td>Default clientExitHandler folder and file<br>
              Controlling exit process is a mandatory function.
              So, you cannot control. But, If you want to design your process, please correct this file.
              More information will be found in <a href="">here</a>.
            </td>
          </tr>
        </tbody>
      </table>

      <h4 id="setting_options" class="doc-h4">Options</h4>
      <p>
        Some developers want to build their own project hierarchy and implement their own way.
        Of course, it is possible.
        For correcting options propertis, you can control summer-mvc's <code class="doc-emphasis">automatical building machnism</code>.
      </p>
      <div class="well doc-well">
        "remove_and_rebuild" : "false"
      </div>
      <p>
        When set true, summer-mvc will remove and copy all files that included in initializer.json files during all initial time.
        If you rebuild your project, please set true.
      </p>
      <blockquote class="doc-notice p-end">
        When set true, your source code may delete.
      </blockquote>

      <div class="well doc-well">
        "auto_structure_creation" : "true"
      </div>
      <p clas="p-end">
        When true, summer-mvc will build your project automatically.
        But, when false, summer-mvc will not do that.
      </p>

      <h4 id="setting_static_folders" class="doc-h4">Static Folders</h4>
      <p>
        It is very simple property.
        The summer-mvc has its own static path for accessing resources directly.
        You can add any folders in your project.
      </p>
      <div class="well doc-well section-end">
        "static_folders" : [ "/static", "/static/upload" ]
      </div>


      <h3 id="create_application" class="doc-h3">Create Application</h3>
      <hr style="border-top: 1px solid #ccc;">

      <iframe class="p-end manual_video" style="width:100%" src="//www.youtube.com/embed/xZz1hEwbBus" frameborder="0" allowfullscreen="allowfullscreen"></iframe>

      <p>
      	  Now, preparation completed.
	      Remaining job is to implement your business codes.
	      As all Nodejs codes are executed under asynchronous non-blocking I/O environment, be care when you write code.
	      Basically all executions are wraped with Promise pattern.
	      But db accessing, file accessing will be executing asynchronous.
	  </p>
	  <p>
	      The summer-mvc follows MVC concepts and has a adapter for doing that.
	      <code class="doc-file">context-dispatcher.json</code> contains dispatching information of project.
	      All http request and response have their own controller logic.
	      After controller logic executing, summer-mvc assign result models to ejs view files.
	      For correcting <code class="doc-file">context-dispatcher.json</code>, you can control your own project navigator like spring framework's <code class="doc-file">web.xml</code>.
	  </p>
    <p>
      More information can be found in <b>Design Logic Section</b><br>
      <button class="btn_important p-end" onclick="location.href='http://localhost:3000/deep-drive#design_logic'">Go To Design Logic</button>
    </p>


      <h4 id="context_dispatcher_json" class="doc-h4">context-dispatcher.json</h4>
      <p>
      	<code class="doc-file">context-dispatcher.json</code> is a JSON file.
      	It consists of 2 main parts such as "GET" and "POST".
      	It is same as http methods.
      	Every internal objects have id, path, controllerJS, controlFunction, viewPath and view.
      </p>
      <div class="well doc-well p-end">
        {
        <br>&nbsp;&nbsp;&nbsp;&nbsp;"GET" : [
        <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
        <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"id": "index",
        <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"path": "/",
        <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"controllerJS": "controller_basic.js",
        <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"controlFunction": "control",
        <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"viewPath": "",
        <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"view": "index.ejs"
        <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},
        <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
        <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"id": "setCookie",
        <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"path": "/setCookie",
        <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"controllerJS": "controller_cookie_session.js",
        <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"controlFunction": "control",
        <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"viewPath": "",
        <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"view": "index.ejs"
        <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
        <br>&nbsp;&nbsp;&nbsp;&nbsp;],
        <br>&nbsp;&nbsp;&nbsp;&nbsp;"POST" : [
        <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
        <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"id": "indexPost",
        <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"path": "/",
        <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"controllerJS": "controller_post.js",
        <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"controlFunction": "control",
        <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"viewPath": "",
        <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"view": "index.ejs"
        <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
        <br>&nbsp;&nbsp;&nbsp;&nbsp;]
        <br>}
      </div>
      <table class="table table-responsive table-hover p-end">
      	<thead>
      		<tr>
      			<th>Property Name</th>
      			<th>Usage</th>
      		</tr>
      	</thead>
      	<tbody>
      		<tr>
      			<td>id</td>
      			<td>An identifier of dispatching information</td>
      		</tr>
      		<tr>
      			<td>path</td>
      			<td>Client's request path under web application root</td>
      		</tr>
      		<tr>
      			<td>controllerJS</td>
      			<td>JS file that contains business Logic</td>
      		</tr>
      		<tr>
      			<td>controlFunction</td>
      			<td>As 1 controllerJS has multiple control functions, controller must be declared.</td>
      		</tr>
      		<tr>
      			<td>viewPath</td>
      			<td>ejs view file's path under default ejs paths.
					( Default View File Path is /application/views )
      			</td>
      		</tr>
      		<tr>
      			<td>view</td>
      			<td>ejs file name</td>
      		</tr>
      	</tbody>
      </table>
      <p class="p-end">
      	When the summer-mvc receive a http request, summer-mvc will extract <code class="doc-emphasis">path</code> and will find matched disptching info.
      	If founded, execute controller and make model object (JSON).
      	Finally, summer-mvc throw ejs file information with model object to ejs module.
      	<code class="doc-middleware">Express</code> and <code class="doc-middleware">ejs</code> cooperate to render response to client.
      </p>

      <h4 id="controller" class="doc-h4">Controller</h4>
      <div class="well doc-well">
      	exports.{<b>controller-name</b>} = function(res, res){ <br>
      		&nbsp;&nbsp;&nbsp;&nbsp;return new Promise( function(resolve, reject){ &nbsp;&nbsp;&nbsp;&nbsp;<br>
      			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;... <br>
      			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolve( {<b>model</b>} ); <br>
      			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reject( ... ); <br>
      		&nbsp;&nbsp;&nbsp;&nbsp;} ); <br>
      	} <br>
      </div>
      <table class="table table-responsive table-hover">
      	<caption>Parameter</caption>
      	<tbody>
      		<tr>
      			<td>req</td>
      			<td>http request object</td>
      		</tr>
      		<tr>
      			<td>res</td>
      			<td>http response object</td>
      		</tr>
          <tr>
      			<td>connection</td>
      			<td>Mysql connection</td>
      		</tr>
      	</tbody>
      </table>
      <table class="table table-responsive table-hover">
      	<caption>Return</caption>
      	<tbody>
      		<tr>
      			<td>Promise Object</td>
      			<td>summer-mvc execute returned promise object automatically <br>
      				This promise must be resolve JSON Object named model.
      			</td>
      		</tr>
      	</tbody>
      </table>
      <p>
      	The summer-mvc's controller must have upper syntax.
      	The summer-mvc core interpret this function when http request thrown in and execute it.
      	As Nodejs run under asynchronous environment, we recommend that you will use this syntax pattern even if basic call return type is possible.
      </p>
      <blockquote class="doc-notice">
      	All controllers must be located under /application/controllers folder.
      </blockquote>
      <p>
        More information can be found in <b>write code section</b>.<br>
        <button class="btn_important p-end" onclick="location.href='/deep-drive#write_code'">Go To Write Code Section</button>
      </p>

      <h4 id="view" class="doc-h4">View</h4>
      <h5>In controller.js</h5>
      <div class="well doc-well">
        exports.control = function( req, res, callback ){
          <br>&nbsp;&nbsp;&nbsp;&nbsp;return new Promise( function(resolve, reject){
            <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var model = {};
            <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.<b>result</b> = "This is sample page";
            <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>resolve( model );</b>
          <br>&nbsp;&nbsp;&nbsp;&nbsp;} );
        <br>}
      </div>
      <h5>In view.ejs</h5>
      <div class="well doc-well p-end">
          &#60;tr&#62;
            <br>&nbsp;&nbsp;&nbsp;&nbsp;&#60;td&#62;>Result Message&#60;/td&#62;
            <br>&nbsp;&nbsp;&nbsp;&nbsp;&#60;td&#62;>&#60;&#37;- <b>result</b>&#37;&#62;&#60;/td&#62;
          <br>&#60;/tr&#62;
      </div>
      <p>
      	Now (v2.0.0), summer-mvc's default view engine is <a href="https://www.npmjs.com/packages/ejs">ejs</a>.
      	All model that generated by controller can be assign as <code>&#60;&#37; &#37;&#62;</code> pattern and default model object type is JSON.
      	By default, the summer-mvc core translates all model to JSON object, you don't need to translate object to JSON.
      	More information can be found in <a href="https://www.npmjs.com/packages/ejs">ejs homepage</a>.
      </p>
      <blockquote class="doc-notice">
      	All controllers must be located under /application/views folder.
      </blockquote>
      <p>
        More information can be found in <b>write code section</b>.<br>
        <button class="btn_important p-end" onclick="location.href='/deep-drive#write_code'">Go To Write Code Section</button>
      </p>

      <h4 id="model" class="doc-h4">Model</h4>
      <div class="well doc-well">
        function <b>setModel</b>( req, res, results, fields ){
        <br>
        	<br>&nbsp;&nbsp;&nbsp;&nbsp;var queries = require( __mysqlQueries );
        	<br>&nbsp;&nbsp;&nbsp;&nbsp;var model = {};
        <br>&nbsp;&nbsp;&nbsp;&nbsp;
        	<br>&nbsp;&nbsp;&nbsp;&nbsp;try{
        	<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	model.method = req.method;
        	<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	model.path = req._parsedUrl.pathname;
        	<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	model.queryString = JSON.stringify( req.query, null, 4 );
        	<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	model.params = JSON.stringify( req.params, null, 4 );
          <br>&nbsp;&nbsp;&nbsp;&nbsp;
        	<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	model.message = results;
        	<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	model.queries = queries;
          <br>&nbsp;&nbsp;&nbsp;&nbsp;
        	<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<b>return model</b>;
        	<br>&nbsp;&nbsp;&nbsp;&nbsp;} catch( err ){
        	<br>&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;throw err;
        	<br>&nbsp;&nbsp;&nbsp;&nbsp;}
      <br> }
      </div>

      <p>
      	Repeatedly said, summer-mvc's components communcate using <b>JSON object</b>.
      	Even if request and response will be translated to JSON object,
      	it is common way to send object shaped as JSON for preventing unexpected events,
      	such as object nesting, numeric exceptions. It is common way to implement <code>setModel</code> function that returns <code class="doc-emphasis">model</code> object.
        Please specify your view page's dynamic values and implement <code>setModel</code> function.
      </p>
      <p>
        More information can be found in <b>write code section</b>.<br>
        <button class="btn_important p-end" onclick="location.href='/deep-drive#write_code'">Go To Write Code Section</button>
      </p>

      <h4 id="example" class="doc-h4">Example</h4>
		<p>
			Example can be found in default summer-mvc architecture.
			Controller will be found under <code class="doc-file">{user-project}/application/controllers</code> and
			View will be found under <code class="doc-file">{user-project}/application/views</code>.
			<br>And default url for testing is <a href="http://localhost:3000/default">http://localhost:3000/default</a>
		</p>
		<blockquote class="doc-notice section-end">
			http://{user-server-name or ip}:{default-port}/default
		</blockquote>


	  <% include partials/footer.ejs %>

      </div>
    </div>
  </div>

  <div class="after"></div>
</body>

</html>
